---
import FormattedDate from "@/components/FormattedDate.astro";
import { R2_BUCKET } from "@/consts";
import { type Product } from "@/type";
import { styled as p, HStack, VStack } from "@styled-system/jsx";

type Props = Product;

const {
  id,
  title,
  slug,
  author,
  createdAt,
  updatedAt,
  description,
  tags,
  thumbnail,
} = Astro.props;

// ![[url]]の形式であれば urlにする
const replaceThumbnail = thumbnail?.replace(/!\[\[/g, "").replace(/\]\]/g, "");
---

<p.a
  href={`/products/${slug}/`}
  display="block"
  position="relative"
  borderRadius="8px"
  overflow="hidden"
  boxShadow="0 4px 8px rgba(0, 0, 0, 0.1)"
  transition="transform 0.3s ease, box-shadow 0.3s ease"
  textDecoration="none"
  color="inherit"
  aspectRatio="4/3"
  width="100%"
  minWidth="300px"
  _hover={{
    transform: "translateY(-4px)",
    boxShadow: "0 8px 16px rgba(0, 0, 0, 0.15)",
  }}
>
  <p.div
    position="relative"
    width="100%"
    height="100%"
    sm={{
      width: "100vw",
      maxWidth: "100%",
    }}
    minWidth="300px"
  >
    <p.div width="100%" paddingTop="75%" position="relative" overflow="hidden">
      {
        replaceThumbnail ? (
          <p.img
            src={`${R2_BUCKET}/${replaceThumbnail}`}
            alt={title}
            position="absolute"
            top="0"
            left="0"
            width="100%"
            height="100%"
            objectFit="cover"
          />
        ) : (
          <p.img
            src="https://content.nasubi.dev/assets/nasubi-new.webp"
            alt={title}
            position="absolute"
            top="0"
            left="0"
            width="100%"
            height="100%"
            objectFit="cover"
          />
        )
      }
    </p.div>

    <p.div
      position="absolute"
      bottom="0"
      width="100%"
      minWidth="300px"
      maxWidth="100%"
      padding="1rem 1rem 0 1rem"
      background="rgba(255, 255, 255, 0.25)"
      backdropFilter="auto"
      backdropBlur="md"
      borderTop="1px solid rgba(255, 255, 255, 0.3)"
    >
      <p.h4
        width="100%"
        margin="0 0 0.5rem"
        fontSize="1.2rem"
        fontWeight="bold"
        overflow="hidden"
        textOverflow="ellipsis"
        display="-webkit-box"
        WebkitLineClamp="1"
        style={{
          WebkitBoxOrient: "vertical",
        }}
      >
        {title}
      </p.h4>

      <HStack>
        {
          tags && tags.length > 0 && (
            <p.div
              display="flex"
              flexWrap="nowrap"
              gap="0.5rem"
              marginBottom="0.75rem"
              overflow="hidden"
              textOverflow="ellipsis"
              whiteSpace="nowrap"
              maxWidth="100%"
            >
              {(() => {
                // タグの名前の長さに基づいて表示するタグ数を計算
                const avgTagLength =
                  tags.reduce((sum, tag) => sum + tag.length, 0) / tags.length;
                let visibleTagCount = 3; // デフォルト表示数

                // タグの平均文字数に応じて表示数を調整
                if (avgTagLength > 10) visibleTagCount = 1;
                else if (avgTagLength > 3) visibleTagCount = 2;

                return (
                  <>
                    {tags.slice(0, visibleTagCount).map((tag) => (
                      <p.span
                        fontSize="0.75rem"
                        padding="0.2rem 0.5rem"
                        background="nsb.secondary"
                        borderRadius="4px"
                        title={tag}
                      >
                        {"#" + tag}
                      </p.span>
                    ))}
                    {tags.length > visibleTagCount && (
                      <p.span
                        fontSize="0.75rem"
                        padding="0.2rem 0.5rem"
                        background="nsb.secondary"
                        borderRadius="4px"
                        whiteSpace="nowrap"
                        title={`${tags.length - visibleTagCount}個の追加タグ: ${tags.slice(visibleTagCount).join(", ")}`}
                      >
                        {`+${tags.length - visibleTagCount}`}
                      </p.span>
                    )}
                  </>
                );
              })()}
            </p.div>
          )
        }

        <p.p fontSize="0.8rem" color="rgba(0, 0, 0, 0.6)" margin="0" ml="auto">
          <FormattedDate date={createdAt} />
        </p.p>
      </HStack>
    </p.div>
  </p.div>
</p.a>
